{
	"name": "KeyError",
	"message": "'TAUX_INFL'",
	"stack": "---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\indexes\\base.py:3812, in Index.get_loc(self, key)
   3811 try:
-> 3812     return self._engine.get_loc(casted_key)
   3813 except KeyError as err:

File pandas/_libs/index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()

File pandas/_libs/index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()

File pandas/_libs/hashtable_class_helper.pxi:7088, in pandas._libs.hashtable.PyObjectHashTable.get_item()

File pandas/_libs/hashtable_class_helper.pxi:7096, in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'TAUX_INFL'

The above exception was the direct cause of the following exception:

KeyError                                  Traceback (most recent call last)
Cell In[193], line 37
     32     df_ti_dept['TAUX_INFL_FINAL'] = ((taux_infl_current_year/df_ti_dept['TAUX_INFL_2015'])-1)*100
     34     df_resultats = pd.concat([df_resultats, df_ti_dept[['Year', 'TAUX_INFL_FINAL']]], ignore_index=True)
---> 37 moyenne_par_annee = df_resultats.groupby(df_resultats['Year'].dt.year).apply(moyenne_ponderee).reset_index(name = 'TAUX_INFL_FINAL')
     39 dix_ans = moyenne_par_annee[moyenne_par_annee['Year'].between(current_year - 10, current_year)]['TAUX_INFL_FINAL'].mean()
     40 huit_ans = moyenne_par_annee[moyenne_par_annee['Year'].between(current_year - 8, current_year)]['TAUX_INFL_FINAL'].mean()

File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\groupby\\groupby.py:1825, in GroupBy.apply(self, func, include_groups, *args, **kwargs)
   1823 with option_context(\"mode.chained_assignment\", None):
   1824     try:
-> 1825         result = self._python_apply_general(f, self._selected_obj)
   1826         if (
   1827             not isinstance(self.obj, Series)
   1828             and self._selection is None
   1829             and self._selected_obj.shape != self._obj_with_exclusions.shape
   1830         ):
   1831             warnings.warn(
   1832                 message=_apply_groupings_depr.format(
   1833                     type(self).__name__, \"apply\"
   (...)   1836                 stacklevel=find_stack_level(),
   1837             )

File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\groupby\\groupby.py:1886, in GroupBy._python_apply_general(self, f, data, not_indexed_same, is_transform, is_agg)
   1851 @final
   1852 def _python_apply_general(
   1853     self,
   (...)   1858     is_agg: bool = False,
   1859 ) -> NDFrameT:
   1860     \"\"\"
   1861     Apply function f in python space
   1862 
   (...)   1884         data after applying f
   1885     \"\"\"
-> 1886     values, mutated = self._grouper.apply_groupwise(f, data, self.axis)
   1887     if not_indexed_same is None:
   1888         not_indexed_same = mutated

File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\groupby\\ops.py:919, in BaseGrouper.apply_groupwise(self, f, data, axis)
    917 # group might be modified
    918 group_axes = group.axes
--> 919 res = f(group)
    920 if not mutated and not _is_indexed_like(res, group_axes, axis):
    921     mutated = True

Cell In[193], line 5, in moyenne_ponderee(group)
      4 def moyenne_ponderee(group):
----> 5     taux = pd.to_numeric(group['TAUX_INFL'], errors = 'coerce')
      6     poids = pd.to_numeric(group['EFFECTIF'], errors = 'coerce')
      7     return np.average(taux, weights = poids)

File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\frame.py:4107, in DataFrame.__getitem__(self, key)
   4105 if self.columns.nlevels > 1:
   4106     return self._getitem_multilevel(key)
-> 4107 indexer = self.columns.get_loc(key)
   4108 if is_integer(indexer):
   4109     indexer = [indexer]

File ~\\AppData\\Roaming\\Python\\Python311\\site-packages\\pandas\\core\\indexes\\base.py:3819, in Index.get_loc(self, key)
   3814     if isinstance(casted_key, slice) or (
   3815         isinstance(casted_key, abc.Iterable)
   3816         and any(isinstance(x, slice) for x in casted_key)
   3817     ):
   3818         raise InvalidIndexError(key)
-> 3819     raise KeyError(key) from err
   3820 except TypeError:
   3821     # If we have a listlike key, _check_indexing_error will raise
   3822     #  InvalidIndexError. Otherwise we fall through and re-raise
   3823     #  the TypeError.
   3824     self._check_indexing_error(key)

KeyError: 'TAUX_INFL'"
}
